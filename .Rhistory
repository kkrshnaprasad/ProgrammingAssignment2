data_frame <- data.frame()
for (x in id) {
File_read <- read.csv(All_files[x])
nobs <- sum(complete.cases(File_read))
temp <- data.frame(x, nobs)
data_frame <- rbind(data_frame, temp)
}
colnames(data_frame) <- c("id", "nobs")
data_frame
}
source("complete.R")
complete("specdata", 1)
complete("specdata", c(2, 4, 8, 10, 12))
complete("specdata", 30:25)
complete("specdata", 3)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
source("submitscript1.R")
source("complete.R")
submit()
6
submit()
submit()
q()
q()
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(files_full[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate-ct$nitrate))
}
}
data_vector
}
cr <- corr("specdata", 150)
head(cr)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate-ct$nitrate))
}
}
data_vector
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate_ct$nitrate))
}
}
data_vector
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate_ct$nitrate))
}
}
round(data_vector,digits=3)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate_ct$nitrate))
}
}
round(data_vector,digits=4)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate_ct$nitrate))
}
}
round(data_vector,digits=5)
}
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
cr <- corr("specdata", 5000)
summary(cr)
length(cr)
cr <- corr("specdata")
summary(cr)
length(cr)
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript1.R")
submit()
source("corr.r")
submit()
data_vector
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
all_files <- list.files(directory, full.names = TRUE)
data_vector <- vector(mode = "numeric", length = 0)
for (x in 1:length(all_files)) {
File_read <- read.csv(all_files[x])
Total_sum <- sum((!is.na(File_read$sulfate)) & (!is.na(File_read$nitrate)))
if (Total_sum > threshold) {
temp <- File_read[which(!is.na(File_read$sulfate)), ]
Nitrate_ct <- temp[which(!is.na(temp$nitrate)), ]
data_vector<- c(data_vector, cor(Nitrate_ct$sulfate, Nitrate_ct$nitrate))
}
}
data_vector
}
source("corr.r")
source("complete.R")
cr <- corr("specdata", 150)
submit()
submit()
submit()
q()
submit()
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_lisy
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$oragne)
sum(flags$orange)
flag_colors <- flags[,11:17]
ohead(flag_colors)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flagshapes,range)
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lappy(flags,unique)
unique_vals <- lapply(flags,unique)
unique_vals
length(unique_vals)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
q()
r
R
library(swirl)
swirl()
sapply(flags, unique)
vapply(flags,unique,numeric(1))
ok()
sapply(flags,class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$animate,flags$landmass,summary)
tapply(flags$population,flags$landmass,summary)
q()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
sample(LETTERS,5)
sample(LETTERS,)
LETTERS
sample(LETTERS)
sample(c(0,1),100)
sample(c(0,1),100,prob = c(0.3,0.7))
sample(c(0,1),100,replace = FALSE,prob = c(0.3,0.7))
flips <- sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(1)
sum(flips)
?rbinom
rbinom(1,size = 100, prob = 0.7)
flips <- rbinom(c(0.1),100,prob=0.7)
flips <- rbinom(100,1,prob=0.7)
flips <- rbinom(1,100,prob=0.7)
flips2 <- rbinom(100,1,prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=1)
rnorm(10,mean=100,sd=25)
?rpois()
rpois(5,lambda=10)
replicate(100, rpois(5,10))
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colmeans(my_pois)
?colMeans
cm <- colMeans(my_pois)
hist(cm)
0
q()
library(swirl)
swirl()
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t1)
quarters(t2)
t3 <- "October 17,1986 08:24"
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time()>t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main = "My Plot")
?plot
plot(cars, sub = "My Plot Subtitle")
?plot
plot(cars, col = "red")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data(mtcars)
dim(mtcars)
boxplot(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
date
?"date"
?Sys.Date
x <- Sys.date()
x <- Sys.Date()
x
Great
Great <- "I am great"
c(1, Great)
?combine
exit
dir()
setwd("ProgrammingAssignment2")
ls
ls()
getwd()
dir()
load("cachematrix.R")
file.edit("cachematrix.R")
file.edit("README.md")
source("ProgrammingAssignment2/cachematrix.R")
## Caching the Inverse of a Matrix:
## Matrix inversion is usually a costly computation and there may be some
## benefit to caching the inverse of a matrix rather than compute it repeatedly.
## Below are a pair of functions that are used to create a special object that
## stores a matrix and caches its inverse.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## This function computes the inverse of the special "matrix" created by
## makeCacheMatrix above. If the inverse has already been calculated (and the
## matrix has not changed), then it should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
source("ProgrammingAssignment2/cachematrix.R")
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
## Here I am performing the Caching of Inverse of a Matrix:
## Using caching we can to an extent bring down the cost of computation of matrix
## inversion
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
list(set = set,
get = get,
setInverse = setInverse,
getInverse = getInverse)
}
## The following function calculates the inverse of the special "matrix"
## created with the above function. However, it first checks to see if the
## mean has already been calculated. If so, it `get`s the inverse from the
## cache and skips the computation. Otherwise, it calculates the inverse of
## the data and sets the value of the inverse in the cache via the `setInverse`
## function.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
source("cachematrix.R")
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix$set(matrix(c(2, 2, 1, 4), 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
cacheSolve(my_matrix)
my_matrix$getInverse()
git commit -m “cachematrix.R"
q()
